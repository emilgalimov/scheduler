syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

option go_package = "gitlab.ozon.dev/emilgalimov/homework-2/api";

message User {
  uint64 ID = 1;
}

message CreateUserRequest {
}

message TaskID {
  uint64 ID = 1;
}

message CreateTaskStageRequest{
  uint64 taskID = 1;
  TaskStage task_stage = 2;
}

message TaskStageID{
  uint64 ID = 1;
}

message SubscribeUserRequest{
  uint64 UserID = 1;
  uint64 TaskID = 2;
}

message SubscribeUserResponse{
  bool isSubscribed = 1;
}

message UnsubscribeUserRequest{
  uint64 UserID = 1;
  uint64 TaskID = 2;
}

message UnsubscribeUserResponse{
  bool isUnsubscribed = 1;
}

message GetTasksListRequest{
}
message TasksList{
  repeated Task tasks = 1;
}

message Task {
  uint64 ID = 1;
  string name = 2;
  string description = 3;
  repeated TaskStage task_stages = 4;
}

message TaskStage {
  uint64 ID = 1;
  string name = 2;
  string description = 3;
  uint64 minutes_from_start = 4;
  uint64 duration_minutes = 5;
}

message UserTask {
  User user = 1;
  Task task = 2;
  google.protobuf.Timestamp start_time = 3;
}

message GetUserTasksByTimeRequest {
  uint64 user_id = 1;
  google.protobuf.Timestamp time_from = 2;
  google.protobuf.Timestamp time_to = 3;
}

service SmartCalendar {
  rpc CreateUser(CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/v1/user/create",
      body: "*"
    };
  }

  rpc CreateTask(Task) returns (TaskID) {
    option (google.api.http) = {
      post: "/v1/task/create",
      body: "*"
    };
  }

  rpc CreateTaskStage(CreateTaskStageRequest) returns (TaskStageID) {
    option (google.api.http) = {
      post: "/v1/task-stage/create",
      body: "*"
    };
  }

  rpc GetTasksList(GetTasksListRequest) returns (TasksList) {
    option (google.api.http) = {
      post: "/v1/task/list"
    };
  }

  rpc SubscribeUser(SubscribeUserRequest) returns (SubscribeUserResponse){
    option (google.api.http) = {
      post: "/v1/user/subscribe",
      body: "*"
    };
  }

  rpc UnsubscribeUser(UnsubscribeUserRequest) returns (UnsubscribeUserResponse){
    option (google.api.http) = {
      post: "/v1/user/unsubscribe",
      body: "*"
    };
  }

  rpc GetUserTasksByTime(GetUserTasksByTimeRequest) returns (TasksList){
    option (google.api.http) = {
      post: "/v1/user/tasks-by-time",
      body: "*"
    };
  }
}


